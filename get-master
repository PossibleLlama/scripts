#! /bin/bash

SEARCH_PATH="."
DEFAULT_BRANCH="master"
STAY_ON_DEFAULT=0
VERBOSE=0

usage() {
    echo "WIP"
}

find_directories_with_git_repos() {
    REL_PATH="$(find . -type d | grep .git$)"
    CWD="$(pwd)"

    for single_path in ${REL_PATH[@]};
    do
        WITHOUT_GIT="${single_path::-5}"
        ABS_PATH="${CWD}/${WITHOUT_GIT:2}"
        GIT_DIRS+=($ABS_PATH)
    done
}

save_branch_go_to_master () {
    BRANCH=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
    HUMAN_READABLE_DIR="$(echo $CWD | rev | cut -d'/' -f1 | rev)"

    echo "$HUMAN_READABLE_DIR: $BRANCH"
    if [ "$BRANCH" != "$DEFAULT_BRANCH" ]; then
        NON_MASTER_GIT_BRANCH=$BRANCH
        git stash push
        git checkout $DEFAULT_BRANCH
    fi
}

switch_back_branch () {
    if [ "$NON_MASTER_GIT_BRANCH" != "" ]; then
        git checkout $NON_MASTER_GIT_BRANCH
        git stash pop
    fi
}

declare -a GIT_DIRS=()

while [ "$1" != "" ];
do
    case $1 in
        -p | --path )       shift
                            SEARCH_PATH=$1
                            ;;
        -b | --branch )     shift
                            DEFAULT_BRANCH=$1
                            ;;
        -m | --master )     STAY_ON_DEFAULT=1
                            ;;
        -v | --verbose )    VERBOSE=1
                            ;;
        -h | --help )       usage
                            exit 0
                            ;;
    esac
    shift
done

cd $SEARCH_PATH
find_directories_with_git_repos
for CWD in ${GIT_DIRS[@]};
do
    cd $CWD
    NON_MASTER_GIT_BRANCH=""

    save_branch_go_to_master
    git pull --prune
    switch_back_branch
    echo
done
echo "Done"
